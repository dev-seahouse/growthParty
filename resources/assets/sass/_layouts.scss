$padding-offsets: (default: 0, small: rem-calc(10px), medium: rem-calc(20px), large: rem-calc(30px));
$directions:('top','right', 'bottom','left');
$footer-height: 8.625rem;
/**
 * ===========Layout Rules==============
 * This section defines reusable classes
 * defining how elements are positioned
 *
 */

.l-restrained {
  max-width: $grid_row-width;
  margin: auto;
}
/*----------  Alignment helpers  ----------*/

// same effect as float left, apply to flex item
.flex-pull-left {
  align-self: flex-start;
  margin-right: auto;
}

// same effect as float right, apply to flex item
.flex-pull-right {
  align-self: flex-end;
  margin-left: auto;
}

.flex-align-center {
  @include flex-align($y:'middle');
}

// for each breakpoint, add breakpoint-{#hdir} flex classes
@include -zf-each-breakpoint {
  @each $hdir, $prop in $-zf-flex-justify {
    .row {
      .#{$-zf-size}-#{$hdir} {
        @include flex-align($x: $hdir);
      }
    }
  }
}
/* --------  Media object ---------- */

.media-object.stack {
  flex-direction: column;
  .media-object-section img.l-img-restraint-width{
   width: 40%;
 }
}
/*---------- Gutter helpers ----------*/

// generates vertical and horizontal padding
// based on $padding-offsets map

@each $key, $value in $padding-offsets {
  @if ($key == default) {
    .l-padded {
      @include v-and-h-padding($value)
    }

    .l-v-padded {
      @include v-padding($value)
    }

    .l-h-padded {
      @include h-padding($value)
    }
  } @else {
    .l-#{$key}-padded {
      @include v-and-h-padding($value);
    }

    .l-#{$key}-v-padded {
      @include v-padding($value);
    }

    .l-#{$key}-h-padded {
      @include h-padding($value);
    }
  }
}


@include make-spacers($directions, 'padding', 0);
@include make-spacers($directions,'padding', 10px)

@include make-spacers($directions, 'margin', 10px);
@include make-spacers($directions, 'margin', 0);
@include make-spacers($directions,'margin', 30px);

.p-v-0 {
  padding-top: 0;
  padding-bottom: 0;
}

.p-h-0{
  padding-left:0;
  padding-right:0;
}

.fix-nav-cover-content {
  margin-top: rem-calc(85px);
}

.l-full-height {
  min-height: calc(100vh - #{$footer-height + 2.3rem});
}
/*----------  Logo layout  ----------*/

.l-logo-img {
  margin-left: rem-calc(30px);
  margin-right: auto;
  max-width: rem-calc(50px);
  @include breakpoint('medium') {
    margin-right: rem-calc(20px);
  }
}
// this is very bad ... high specificity
.menu.vertical > li > a.logo {
  align-items: center;
  color: $black;
  font-size:1.1rem;
  .logo-text {
    margin-left: 10px;
    font-weight: 900;
  }
}

/*----------  Icon layout  ----------*/
.l-featured-icon {
  padding-bottom: rem-calc(20px);
}

/*----------  Footer layout  ----------*/
.l-footer {
  min-height: $footer-height;
}

.l-featured {
  margin-bottom:rem-calc(65px);
}
/* --------- Image Layouts ------------ */
// overwrites progressively default height:100%
.progressive__img {
  height: auto!important;
  max-height: rem-calc(350px);
}

.reward {
  border-radius:4px;
  display:inline-block;
  margin:20px;
  margin-left:0;
  padding:25px;
  padding-right: 35px;
  background-color:get_color(light-gray);
}


